# backup_and_upload.py
# Creates an encrypted backup of LOCAL_DB_PATH and uploads it to CHANNEL via BOT_TOKEN.
# Usage: python backup_and_upload.py
import os
import shutil
from datetime import datetime
import asyncio
from cryptography.fernet import Fernet
from dotenv import load_dotenv
from telegram import Bot, InputFile

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL = os.getenv("CHANNEL_USERNAME_OR_ID")  # e.g. @yourchannel or -1001234567890
DB_PATH = os.getenv("LOCAL_DB_PATH", "loan_bot.db")
BACKUP_DIR = os.getenv("BACKUP_DIR", "backups")
KEY_PATH = os.getenv("FERNET_KEY_PATH", "fernet.key")

if not BOT_TOKEN:
    raise SystemExit("ERROR: BOT_TOKEN not set in .env")
if not os.path.exists(DB_PATH):
    raise SystemExit(f"ERROR: DB not found at {DB_PATH}")

os.makedirs(BACKUP_DIR, exist_ok=True)

def load_key():
    if not os.path.exists(KEY_PATH):
        raise SystemExit(f"ERROR: Fernet key not found at {KEY_PATH}. Run keygen first.")
    with open(KEY_PATH, "rb") as f:
        return f.read()

def create_encrypted_backup():
    k = load_key()
    f = Fernet(k)
    ts = datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")
    tmp_copy = os.path.join(BACKUP_DIR, f"loan_bot_{ts}.db")
    # copy DB (avoid locking)
    shutil.copy2(DB_PATH, tmp_copy)
    with open(tmp_copy, "rb") as fh:
        data = fh.read()
    enc = f.encrypt(data)
    enc_path = tmp_copy + ".enc"
    with open(enc_path, "wb") as fh:
        fh.write(enc)
    # remove plain copy
    os.remove(tmp_copy)
    return enc_path

async def upload_file(enc_path: str, caption: str = ""):
    bot = Bot(token=BOT_TOKEN)
    try:
        # Telegram file size limit depends on bot and account; large files may fail.
        # Use InputFile for streaming upload.
        with open(enc_path, "rb") as fh:
            input_file = InputFile(fh, filename=os.path.basename(enc_path))
            await bot.send_document(chat_id=CHANNEL, document=input_file, caption=caption)
    finally:
        await bot.close()

async def main():
    print("Creating encrypted backup...")
    enc = create_encrypted_backup()
    print("Encrypted backup created:", enc)
    caption = f"Encrypted DB backup {os.path.basename(enc)} â€” created at {datetime.utcnow().isoformat()}Z"
    print("Uploading to channel:", CHANNEL)
    try:
        await upload_file(enc, caption=caption)
        print("Upload successful.")
    except Exception as e:
        print("Upload failed:", e)
        print("Backup file remains at:", enc)

if __name__ == "__main__":
    asyncio.run(main())
